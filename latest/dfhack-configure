#!/bin/bash -e

usage()
{
	echo 'Usage: dfhack-configure [os] [bits] [mode] [cmake args...]' >&2
	echo 'os: linux or macosx' >&2
	echo 'bits: 32 or 64' >&2
	echo 'mode: Release or RelWithDebInfo' >&2
}

if [[ $# -lt 3 ]]; then
	usage
	exit 1
fi

os=$1
bits=$2
mode=$3
shift 3

args=

case $os in
linux)
	;;
macosx)
	args="$args -DCMAKE_SYSTEM_NAME=Darwin -DDFHACK_NATIVE_BUILD_DIR=/home/buildmaster/dfhack-native -DCMAKE_C_COMPILER=/usr/lib/ccache-osx/x86_64-apple-darwin14-gcc -DCMAKE_CXX_COMPILER=/usr/lib/ccache-osx/x86_64-apple-darwin14-g++ -DCMAKE_FIND_ROOT_PATH=/osxcross/target/macports/pkgs/opt/local -DCMAKE_OSX_SYSROOT=/osxcross/target/SDK/MacOSX10.10.sdk"
	;;
*)
	usage
	exit 1
	;;
esac

case $bits in
32)
	args="$args -DCMAKE_CXX_COMPILER_ARCHITECTURE_ID=X86 -DCMAKE_SIZEOF_VOID_P=4"
	;;
64)
	args="$args -DCMAKE_CXX_COMPILER_ARCHITECTURE_ID=x64 -DCMAKE_SIZEOF_VOID_P=8"
	;;
*)
	usage
	exit 1
	;;
esac

case $mode in
Release|RelWithDebInfo)
	;;
*)
	usage
	exit 1
	;;
esac

if [[ ! -z "$DFHACK_USE_NINJA" ]]; then
	args="-G Ninja $args"
fi

args=" -DDFHACK_BUILD_ARCH=$bits -DCMAKE_BUILD_TYPE=$mode $args"

exec cmake $args "$@" <&0
